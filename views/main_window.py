from PyQt6.QtWidgets import (QMainWindow, QTabWidget, QWidget, QVBoxLayout, QHBoxLayout,
                         QTableWidget, QTableWidgetItem, QComboBox, QFormLayout,
                         QLineEdit, QPushButton, QLabel, QMessageBox, QHeaderView,
                         QCheckBox, QGroupBox, QSpinBox, QDateEdit, QFileDialog, QMenu,
                         QDialog, QDialogButtonBox, QSplitter, QTextEdit, QInputDialog)
from PyQt6.QtCore import Qt, QDate, pyqtSignal, QPoint, QDateTime, QTimer
from PyQt6.QtGui import QAction, QCursor, QColor, QIntValidator

from views.dialogs import EmissionOrderDialog, DisplayCodesDialog
from .dialogs import ConnectionDialog, CredentialsDialog, NomenclatureDialog, GetKMDialog, BaseDialog
import logging
import datetime
import json
from models.models import Extension, Nomenclature, EmissionType, Country
from typing import List
import os
import sys
from pathlib import Path

logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    get_orders_signal = pyqtSignal(dict)
    get_order_details_signal = pyqtSignal(str)
    create_order_signal = pyqtSignal(dict)
    emit_order_signal = pyqtSignal(dict)
    settings_signal = pyqtSignal()
    get_registry_presets_signal = pyqtSignal()
    get_registry_by_id_signal = pyqtSignal(str)
    test_connection_signal = pyqtSignal()
    check_updates_signal = pyqtSignal()
    get_marking_codes_signal = pyqtSignal(dict)
    get_report_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    get_version_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
    add_order_signal = pyqtSignal(str, str)
    ping_signal = pyqtSignal()
    get_orders_status_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    create_emission_order_signal = pyqtSignal(dict)  # –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç–º–∏—Å—Å–∏—é –∫–æ–¥–æ–≤
    api_orders_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ API
    delete_api_order_signal = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è API –∑–∞–∫–∞–∑–∞
    get_km_from_order_signal = pyqtSignal(str, str, int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ú –∏–∑ –∑–∞–∫–∞–∑–∞
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    add_connection_signal = pyqtSignal(str, str)
    edit_connection_signal = pyqtSignal(int, str, str)
    delete_connection_signal = pyqtSignal(int)
    set_active_connection_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    add_credentials_signal = pyqtSignal(str, str, str, str)  # omsid, token, gln, connection_id
    edit_credentials_signal = pyqtSignal(int, str, str, str)  # id, omsid, token, gln
    delete_credentials_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
    add_nomenclature_signal = pyqtSignal(str, str, str)  # name, gtin, product_group
    edit_nomenclature_signal = pyqtSignal(int, str, str, str)  # id, name, gtin, product_group
    delete_nomenclature_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ API
    set_active_extension_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ API
    load_api_logs_signal = pyqtSignal()
    get_api_log_details_signal = pyqtSignal(int, object, object)  # id, callback_request, callback_response
    export_api_descriptions_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏–π API –≤ —Ñ–∞–π–ª
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
    load_countries_signal = pyqtSignal()
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
    load_order_statuses_signal = pyqtSignal()
    add_order_status_signal = pyqtSignal(str, str, str)  # code, name, description
    edit_order_status_signal = pyqtSignal(int, str, str, str)  # id, code, name, description
    delete_order_status_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
    load_usage_types_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    add_usage_type_signal = pyqtSignal(str, str, str)  # code, name, description
    edit_usage_type_signal = pyqtSignal(int, str, str, str)  # id, code, name, description
    delete_usage_type_signal = pyqtSignal(int)  # id
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∞–º–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
    mark_codes_as_used_signal = pyqtSignal(list)  # code_ids
    mark_codes_as_exported_signal = pyqtSignal(list)  # code_ids
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    load_aggregation_files_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    add_aggregation_file_signal = pyqtSignal(str, dict, str)  # filename, data, comment
    delete_aggregation_file_signal = pyqtSignal(int)  # file_id
    export_aggregation_file_signal = pyqtSignal(int, str)  # file_id, export_path
    send_utilisation_report_signal = pyqtSignal(dict)  # data
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        self.setMinimumSize(800, 600)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API
        self.create_status_bar()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_orders_tab()
        self.create_api_orders_tab()
        self.create_connections_tab()
        self.create_credentials_tab()
        self.create_nomenclature_tab()
        self.create_extensions_tab()
        self.create_api_logs_tab()
        self.create_countries_tab()
        self.create_order_statuses_tab()
        self.create_marking_codes_tab()
        self.create_aggregation_files_tab()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –≤–∏–¥–∂–µ—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã)
        self.tabs.addTab(self.orders_tab, "–ó–∞–∫–∞–∑—ã")
        self.tabs.addTab(self.api_orders_tab, "API –ó–∞–∫–∞–∑—ã")
        self.tabs.addTab(self.api_logs_tab, "–õ–æ–≥–∏ API")
        self.tabs.addTab(self.marking_codes_tab, "–ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
        self.tabs.addTab(self.aggregation_files_tab, "–§–∞–π–ª—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        toolbar = self.addToolBar("–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        catalogs_button = QPushButton("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")
        catalogs_button.clicked.connect(self.show_catalogs_dialog)
        toolbar.addWidget(catalogs_button)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button = QPushButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_button.clicked.connect(self.show_settings_dialog)
        toolbar.addWidget(settings_button)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.tabs.currentChanged.connect(self.on_tab_changed)
    
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        if index == 0:  # –ó–∞–∫–∞–∑—ã
            pass  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã
        elif index == 1:  # API –∑–∞–∫–∞–∑—ã
            pass  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        elif index == 2:  # –õ–æ–≥–∏ API
            self.load_api_logs_signal.emit()
        elif index == 3:  # –ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            self.on_apply_marking_codes_filter()
        elif index == 4:  # –§–∞–π–ª—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            self.load_aggregation_files_signal.emit()
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        status_bar = self.statusBar()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä API
        self.api_status_label = QLabel("API: ")
        self.api_indicator = QLabel("‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        self.api_indicator.setMinimumWidth(150)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_status_label = QLabel("–°–µ—Ä–≤–µ—Ä: ")
        self.server_indicator = QLabel("–ù–µ –≤—ã–±—Ä–∞–Ω")
        self.server_indicator.setMinimumWidth(250)
        
        status_bar.addWidget(self.api_status_label)
        status_bar.addWidget(self.api_indicator)
        status_bar.addWidget(self.server_status_label)
        status_bar.addWidget(self.server_indicator)
        status_bar.addPermanentWidget(QLabel(""))  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    def update_api_status(self, is_available):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        if is_available:
            self.api_indicator.setText("üü¢ –î–æ—Å—Ç—É–ø–µ–Ω")
            self.api_indicator.setStyleSheet("color: green;")
        else:
            self.api_indicator.setText("üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.api_indicator.setStyleSheet("color: red;")
    
    def update_server_status(self, server_name, server_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            server_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            server_url (str): URL —Å–µ—Ä–≤–µ—Ä–∞
        """
        if server_name and server_url:
            self.server_indicator.setText(f"{server_name} ({server_url})")
            self.server_indicator.setToolTip(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server_name}\nURL: {server_url}")
        else:
            self.server_indicator.setText("–ù–µ –≤—ã–±—Ä–∞–Ω")
            self.server_indicator.setToolTip("–ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
    
    def create_api_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤ API"""
        self.api_logs_tab = QWidget()
        layout = QVBoxLayout(self.api_logs_tab)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–≤–µ—Ä—Ö—É
        filters_layout = QHBoxLayout()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ HTTP-–º–µ—Ç–æ–¥–∞–º (GET, POST, PUT, DELETE)
        http_method_label = QLabel("HTTP-–º–µ—Ç–æ–¥:")
        self.http_method_filter = QComboBox()
        self.http_method_filter.addItem("–í—Å–µ", "")
        self.http_method_filter.addItem("GET", "GET")
        self.http_method_filter.addItem("POST", "POST")
        self.http_method_filter.addItem("PUT", "PUT")
        self.http_method_filter.addItem("DELETE", "DELETE")
        filters_layout.addWidget(http_method_label)
        filters_layout.addWidget(self.http_method_filter)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ API –º–µ—Ç–æ–¥–∞–º (ping, codes, utilisation –∏ —Ç.–¥.)
        api_method_label = QLabel("API –º–µ—Ç–æ–¥:")
        self.api_method_filter = QComboBox()
        self.api_method_filter.addItem("–í—Å–µ", "")
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã API
        api_methods = ["ping", "codes", "utilisation", "orders", "aggregation", "report", "version"]
        for method in api_methods:
            self.api_method_filter.addItem(method, method)
        self.api_method_filter.setEditable(True)  # –ü–æ–∑–≤–æ–ª—è–µ–º –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        filters_layout.addWidget(api_method_label)
        filters_layout.addWidget(self.api_method_filter)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        apply_filters_button = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        apply_filters_button.clicked.connect(self.apply_api_logs_filters)
        filters_layout.addWidget(apply_filters_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        reset_filters_button = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        reset_filters_button.clicked.connect(self.reset_api_logs_filters)
        filters_layout.addWidget(reset_filters_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π
        layout.addLayout(filters_layout)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≤–∏–¥–∂–µ—Ç–∞ - –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        splitter = QSplitter(Qt.Orientation.Vertical)
        logs_widget = QWidget()
        logs_layout = QVBoxLayout(logs_widget)
        
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ API
        self.api_logs_table = QTableWidget()
        self.api_logs_table.setColumnCount(7)
        self.api_logs_table.setHorizontalHeaderLabels(["ID", "–ú–µ—Ç–æ–¥", "URL", "–ö–æ–¥", "–£—Å–ø–µ—Ö", "–í—Ä–µ–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.api_logs_table.itemSelectionChanged.connect(self.on_api_log_selected)
        logs_layout.addWidget(self.api_logs_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ API
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏")
        refresh_button.clicked.connect(self.on_refresh_api_logs)
        buttons_layout.addWidget(refresh_button)
        
        export_descriptions_button = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–∏—Å–∞–Ω–∏–π API")
        export_descriptions_button.clicked.connect(self.export_api_descriptions_signal.emit)
        buttons_layout.addWidget(export_descriptions_button)
        
        logs_layout.addLayout(buttons_layout)
        
        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        details_layout.addWidget(QLabel("–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:"))
        self.request_details = QTextEdit()
        self.request_details.setReadOnly(True)
        details_layout.addWidget(self.request_details)
        
        details_layout.addWidget(QLabel("–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:"))
        self.response_details = QTextEdit()
        self.response_details.setReadOnly(True)
        details_layout.addWidget(self.response_details)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(logs_widget)
        splitter.addWidget(details_widget)
        splitter.setSizes([400, 200])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ –º–∞–∫–µ—Ç –≤–∫–ª–∞–¥–∫–∏
        layout.addWidget(splitter)
        
        # –•—Ä–∞–Ω–∏–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.all_api_logs = []
    
    def on_refresh_api_logs(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ API"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        self.http_method_filter.setCurrentIndex(0)
        self.api_method_filter.setCurrentIndex(0)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ API
        self.load_api_logs_signal.emit()
    
    def apply_api_logs_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–≥–æ–≤ API"""
        if not hasattr(self, 'all_api_logs') or not self.all_api_logs:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        http_method = self.http_method_filter.currentData()
        api_method = self.api_method_filter.currentText().strip().lower()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_logs = []
        for log in self.all_api_logs:
            # –§–∏–ª—å—Ç—Ä –ø–æ HTTP-–º–µ—Ç–æ–¥—É
            if http_method and log["method"] != http_method:
                continue
                
            # –§–∏–ª—å—Ç—Ä –ø–æ API –º–µ—Ç–æ–¥—É (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ URL)
            if api_method and api_method not in log["url"].lower():
                continue
                
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            filtered_logs.append(log)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
        self._update_api_logs_table_with_data(filtered_logs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤
        tab_index = self.tabs.indexOf(self.api_logs_tab)
        if tab_index >= 0:
            self.tabs.setTabText(tab_index, f"–õ–æ–≥–∏ API ({len(filtered_logs)})")
    
    def reset_api_logs_filters(self):
        """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–≥–æ–≤ API"""
        self.http_method_filter.setCurrentIndex(0)
        self.api_method_filter.setCurrentIndex(0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ª–æ–≥–æ–≤
        self._update_api_logs_table_with_data(self.all_api_logs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
        tab_index = self.tabs.indexOf(self.api_logs_tab)
        if tab_index >= 0:
            self.tabs.setTabText(tab_index, f"–õ–æ–≥–∏ API ({len(self.all_api_logs)})")
    
    def on_api_log_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∞ API –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected_rows = self.api_logs_table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            log_id = int(self.api_logs_table.item(row, 0).text())
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥–∞ API
            # –ü–µ—Ä–µ–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.get_api_log_details_signal.emit(
                log_id, 
                lambda data: self.update_request_details(data), 
                lambda data: self.update_response_details(data)
            )
    
    def update_request_details(self, request_json):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request_data = json.loads(request_json)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            request_formatted = ""
            if 'headers' in request_data and request_data['headers']:
                request_formatted += "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:\n"
                for header, value in request_data['headers'].items():
                    request_formatted += f"{header}: {value}\n"
            
            if 'data' in request_data and request_data['data']:
                request_formatted += "\n–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\n"
                request_formatted += json.dumps(request_data['data'], ensure_ascii=False, indent=4)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.request_details.setPlainText(request_formatted)
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            print(error_message)
            self.request_details.setPlainText(f"{error_message}\n\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{request_json}")
    
    def update_response_details(self, response_json):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_data = json.loads(response_json)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response_formatted = json.dumps(response_data, ensure_ascii=False, indent=4)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.response_details.setPlainText(response_formatted)
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            print(error_message)
            self.response_details.setPlainText(f"{error_message}\n\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{response_json}")
    
    def update_api_logs_table(self, logs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ API"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.all_api_logs = logs
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self._update_api_logs_table_with_data(logs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–æ–≥–æ–≤
        tab_index = self.tabs.indexOf(self.api_logs_tab)
        if tab_index >= 0:
            self.tabs.setTabText(tab_index, f"–õ–æ–≥–∏ API ({len(logs)})")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ API –º–µ—Ç–æ–¥–æ–≤ –≤ —Ñ–∏–ª—å—Ç—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
        self.update_api_method_filter_items(logs)
    
    def _update_api_logs_table_with_data(self, logs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ API –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        self.api_logs_table.setColumnCount(9)
        self.api_logs_table.setHorizontalHeaderLabels(["ID", "–ú–µ—Ç–æ–¥", "URL", "–ö–æ–¥", "–£—Å–ø–µ—Ö", "–í—Ä–µ–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "request_data", "response_data"])
        
        self.api_logs_table.setRowCount(len(logs))
        for row, log in enumerate(logs):
            self.api_logs_table.setItem(row, 0, QTableWidgetItem(str(log["id"])))
            self.api_logs_table.setItem(row, 1, QTableWidgetItem(log["method"]))
            self.api_logs_table.setItem(row, 2, QTableWidgetItem(log["url"]))
            self.api_logs_table.setItem(row, 3, QTableWidgetItem(str(log["status_code"])))
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞
            success_item = QTableWidgetItem("‚úì" if log["success"] else "‚úó")
            success_item.setBackground(QColor(200, 255, 200) if log["success"] else QColor(255, 200, 200))
            self.api_logs_table.setItem(row, 4, success_item)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            timestamp = datetime.datetime.fromisoformat(log["timestamp"].replace("Z", "+00:00"))
            formatted_time = timestamp.strftime("%Y-%m-%d %H:%M:%S")
            self.api_logs_table.setItem(row, 5, QTableWidgetItem(formatted_time))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            description = log.get("description", "")
            self.api_logs_table.setItem(row, 6, QTableWidgetItem(description))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö
            self.api_logs_table.setItem(row, 7, QTableWidgetItem(log["request"]))
            self.api_logs_table.setItem(row, 8, QTableWidgetItem(log["response"]))
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        self.api_logs_table.setColumnHidden(7, True)
        self.api_logs_table.setColumnHidden(8, True)
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.api_logs_table.resizeColumnsToContents()
    
    def update_api_method_filter_items(self, logs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        current_text = self.api_method_filter.currentText()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ API –º–µ—Ç–æ–¥—ã –∏–∑ –ª–æ–≥–æ–≤
        api_methods = set()
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ API –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤ URL
        known_api_methods = [
            "ping", "codes", "utilisation", "orders", "aggregation", "report", "version", 
            "status", "buffers", "emission", "authentication", "token", "certificates", 
            "nomenclature", "registration", "documents", "quota", "pool"
        ]
        
        for log in logs:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL –∏–º—è –º–µ—Ç–æ–¥–∞ API
            url = log["url"].lower()
            
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ API –∏–∑ URL
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ URL –ø—É—Ç—å /api/v*/ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            if "/api/v" in url:
                # –†–∞–∑–±–∏–≤–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                parts = url.split('/')
                for i, part in enumerate(parts):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã URL
                    if not part or part in ["api", "v1", "v2", "v3", "pharma", "tobacco", "shoes"]:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API
                    if part in known_api_methods:
                        api_methods.add(part)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—á–∞—Å—Ç—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ? –∏–ª–∏ &)
                    elif "?" in part:
                        clean_part = part.split("?")[0]
                        if clean_part and clean_part in known_api_methods:
                            api_methods.add(clean_part)
                    # –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ID —Ä–µ—Å—É—Ä—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å
                    elif part.isdigit() and i > 0 and parts[i-1] in known_api_methods:
                        api_methods.add(parts[i-1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ª–æ–≥–∞, –µ—Å–ª–∏ —Ç–∞–º —É–∫–∞–∑–∞–Ω –º–µ—Ç–æ–¥ API
            description = log.get("description", "").lower()
            for method in known_api_methods:
                if method in description:
                    api_methods.add(method)
        
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –ª–æ–≥–æ–≤
        if not api_methods:
            for log in logs:
                description = log.get("description", "").lower()
                
                # –ß–∞—Å—Ç–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤"
                action_mapping = {
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤": "orders",
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤": "status",
                    "–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏": "ping",
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤": "codes",
                    "–æ—Ç—á–µ—Ç –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏": "utilisation",
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏": "aggregation",
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞": "report",
                    "–ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏": "version",
                    "—ç–º–∏—Å—Å–∏—è": "emission",
                    "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è": "authentication",
                    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": "registration"
                }
                
                for action, method in action_mapping.items():
                    if action in description:
                        api_methods.add(method)
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–í—Å–µ"
        self.api_method_filter.clear()
        self.api_method_filter.addItem("–í—Å–µ", "")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        for method in sorted(api_methods):
            self.api_method_filter.addItem(method, method)
        
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –≤–æ–æ–±—â–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
        if not api_methods:
            for method in ["ping", "codes", "utilisation", "orders", "aggregation", "report", "version"]:
                self.api_method_filter.addItem(method, method)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        index = self.api_method_filter.findText(current_text)
        if index >= 0:
            self.api_method_filter.setCurrentIndex(index)
        else:
            self.api_method_filter.setCurrentIndex(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–í—Å–µ"
    
    def create_extensions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API"""
        self.extensions_tab = QWidget()
        layout = QVBoxLayout(self.extensions_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API
        self.extensions_table = QTableWidget()
        self.extensions_table.setColumnCount(4)
        self.extensions_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ê–∫—Ç–∏–≤–Ω—ã–π"])
        layout.addWidget(self.extensions_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ API
        buttons_layout = QHBoxLayout()
        
        set_active_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_extension)
        buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(buttons_layout)
    
    def on_set_active_extension(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è API"""
        row = self.extensions_table.currentRow()
        if row >= 0:
            extension_id = int(self.extensions_table.item(row, 0).text())
            self.set_active_extension_signal.emit(extension_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def update_extensions_table(self, extensions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API"""
        self.extensions_table.setRowCount(len(extensions))
        for row, extension in enumerate(extensions):
            self.extensions_table.setItem(row, 0, QTableWidgetItem(str(extension.id)))
            self.extensions_table.setItem(row, 1, QTableWidgetItem(extension.name))
            self.extensions_table.setItem(row, 2, QTableWidgetItem(extension.code))
            self.extensions_table.setItem(row, 3, QTableWidgetItem("–î–∞" if extension.is_active else "–ù–µ—Ç"))
    
    def on_add_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit, QMessageBox
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        order_number, ok = QInputDialog.getText(
            self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", QLineEdit.EchoMode.Normal
        )
        
        if ok and order_number:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            status, ok = QInputDialog.getText(
                self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", QLineEdit.EchoMode.Normal
            )
            
            if ok and status:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                self.add_order_signal.emit(order_number, status)
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        else:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
    
    def on_ping_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
        self.ping_signal.emit()
    
    def on_get_orders_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        self.get_orders_signal.emit()
    
    def on_get_report_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.get_report_signal.emit()
    
    def on_get_version_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –°–£–ó –∏ API"""
        self.get_version_signal.emit()
    
    def on_get_orders_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤"""
        self.get_orders_status_signal.emit()
    
    def on_add_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        dialog = ConnectionDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            self.add_connection_signal.emit(data['name'], data['url'])
    
    def on_edit_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            name = self.connections_table.item(row, 1).text()
            url = self.connections_table.item(row, 2).text()
            
            dialog = ConnectionDialog(self)
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dialog.name_input.setText(name)
            dialog.url_input.setText(url)
            
            if dialog.exec():
                data = dialog.get_data()
                self.edit_connection_signal.emit(connection_id, data['name'], data['url'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.delete_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def on_set_active_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.set_active_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def on_add_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dialog = CredentialsDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            connection_id = None
            row = self.connections_table.currentRow()
            if row >= 0:
                connection_id = int(self.connections_table.item(row, 0).text())
            
            # –¢–µ–ø–µ—Ä—å connection_id –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            self.add_credentials_signal.emit(data['omsid'], data['token'], data['gln'], connection_id)
    
    def on_edit_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        selected_rows = self.credentials_table.selectedItems()
        if not selected_rows:
            self.show_message("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        row = selected_rows[0].row()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        try:
            credentials_id = int(self.credentials_table.item(row, 0).text()) if self.credentials_table.item(row, 0) else 0
            omsid = self.credentials_table.item(row, 1).text() if self.credentials_table.item(row, 1) else ""
            token = self.credentials_table.item(row, 2).text() if self.credentials_table.item(row, 2) else ""
            gln = self.credentials_table.item(row, 3).text() if self.credentials_table.item(row, 3) else ""
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dialog = CredentialsDialog(self, {"omsid": omsid, "token": token, "gln": gln})
            if dialog.exec() == QDialog.DialogCode.Accepted:
                data = dialog.get_data()
                self.edit_credentials_signal.emit(credentials_id, data['omsid'], data['token'], data['gln'])
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def on_delete_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        selected_rows = self.credentials_table.selectedItems()
        if not selected_rows:
            self.show_message("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        row = selected_rows[0].row()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            credentials_id = int(self.credentials_table.item(row, 0).text()) if self.credentials_table.item(row, 0) else 0
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Icon.Question)
            msg_box.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?")
            msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            msg_box.setDefaultButton(QMessageBox.StandardButton.No)
            
            if msg_box.exec() == QMessageBox.StandardButton.Yes:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.delete_credentials_signal.emit(credentials_id)
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def on_add_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API
        extensions = []
        source_table = self.main_window.extensions_table
        for row in range(source_table.rowCount()):
            extension_id = int(source_table.item(row, 0).text())
            extension_name = source_table.item(row, 1).text()
            extension_code = source_table.item(row, 2).text()
            is_active = source_table.item(row, 3).text() == "–î–∞"
            extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
        
        dialog = NomenclatureDialog(self, extensions=extensions)
        if dialog.exec():
            data = dialog.get_data()
            self.add_nomenclature_signal.emit(data['name'], data['gtin'], data['product_group'])
    
    def on_edit_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            name = self.nomenclature_table.item(row, 1).text()
            gtin = self.nomenclature_table.item(row, 2).text()
            product_group = self.nomenclature_table.item(row, 3).text() if self.nomenclature_table.item(row, 3) else ""
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            nomenclature = Nomenclature(nomenclature_id, name, gtin, product_group)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
            extensions = []
            source_table = self.main_window.extensions_table
            for row in range(source_table.rowCount()):
                extension_id = int(source_table.item(row, 0).text())
                extension_name = source_table.item(row, 1).text()
                extension_code = source_table.item(row, 2).text()
                is_active = source_table.item(row, 3).text() == "–î–∞"
                extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dialog = NomenclatureDialog(self, nomenclature=nomenclature, extensions=extensions)
            if dialog.exec():
                data = dialog.get_data()
                self.edit_nomenclature_signal.emit(nomenclature_id, data['name'], data['gtin'], data['product_group'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            self.main_window.delete_nomenclature_signal.emit(nomenclature_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def update_orders_table(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤"""
        self.orders_table.setRowCount(len(orders))
        for row, order in enumerate(orders):
            self.orders_table.setItem(row, 0, QTableWidgetItem(str(order.id)))
            self.orders_table.setItem(row, 1, QTableWidgetItem(str(order.order_number)))
            
            # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            status_item = QTableWidgetItem(order.status)
            if order.status == "–ü—Ä–∏–Ω—è—Ç":
                status_item.setBackground(QColor(200, 255, 200))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            elif order.status == "–ù–µ–ø—Ä–∏–Ω—è—Ç":
                status_item.setBackground(QColor(255, 200, 200))  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            self.orders_table.setItem(row, 2, status_item)
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            self.orders_table.setItem(row, 3, QTableWidgetItem(str(order.timestamp)))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            description = ""
            if hasattr(order, 'expected_complete') and order.expected_complete:
                description = f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {order.expected_complete}"
            elif hasattr(order, 'description') and order.description:
                description = order.description
            self.orders_table.setItem(row, 4, QTableWidgetItem(description))
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.orders_table.resizeColumnsToContents()
    
    def update_connections_table(self, connections):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.connections_table.setRowCount(len(connections))
        for row, connection in enumerate(connections):
            self.connections_table.setItem(row, 0, QTableWidgetItem(str(connection.id)))
            self.connections_table.setItem(row, 1, QTableWidgetItem(connection.name))
            self.connections_table.setItem(row, 2, QTableWidgetItem(connection.url))
            self.connections_table.setItem(row, 3, QTableWidgetItem("–î–∞" if connection.is_active else "–ù–µ—Ç"))
    
    def update_credentials_table(self, credentials):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_table.setRowCount(len(credentials))
        for row, cred in enumerate(credentials):
            self.credentials_table.setItem(row, 0, QTableWidgetItem(str(cred.id)))
            self.credentials_table.setItem(row, 1, QTableWidgetItem(cred.omsid))
            self.credentials_table.setItem(row, 2, QTableWidgetItem(cred.token))
            self.credentials_table.setItem(row, 3, QTableWidgetItem(cred.gln))
    
    def update_nomenclature_table(self, nomenclature):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        self.nomenclature_table.setRowCount(len(nomenclature))
        for row, item in enumerate(nomenclature):
            self.nomenclature_table.setItem(row, 0, QTableWidgetItem(str(item.id)))
            self.nomenclature_table.setItem(row, 1, QTableWidgetItem(item.name))
            self.nomenclature_table.setItem(row, 2, QTableWidgetItem(item.gtin))
            self.nomenclature_table.setItem(row, 3, QTableWidgetItem(item.product_group))
    
    def update_countries_table(self, countries):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞–Ω"""
        self.countries_table.setRowCount(len(countries))
        for row, country in enumerate(countries):
            self.countries_table.setItem(row, 0, QTableWidgetItem(str(country.id)))
            self.countries_table.setItem(row, 1, QTableWidgetItem(country.code))
            self.countries_table.setItem(row, 2, QTableWidgetItem(country.name))
        self.countries_table.resizeColumnsToContents()
    
    def show_message(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        QMessageBox.information(self, title, message)

    def create_orders_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
        self.orders_tab = QWidget()
        layout = QVBoxLayout(self.orders_tab)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        splitter = QSplitter(Qt.Orientation.Vertical)
        orders_widget = QWidget()
        orders_layout = QVBoxLayout(orders_widget)
        
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.orders_table = QTableWidget()
        self.orders_table.setColumnCount(5)
        self.orders_table.setHorizontalHeaderLabels(["ID", "–ù–æ–º–µ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.orders_table.itemSelectionChanged.connect(self.on_order_selected)
        orders_layout.addWidget(self.orders_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
        add_button.clicked.connect(self.on_add_order_clicked)
        buttons_layout.addWidget(add_button)
        
        ping_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API")
        ping_button.clicked.connect(self.on_ping_clicked)
        buttons_layout.addWidget(ping_button)
        
        get_orders_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã")
        get_orders_button.clicked.connect(self.on_get_orders_clicked)
        buttons_layout.addWidget(get_orders_button)
        
        get_report_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")
        get_report_button.clicked.connect(self.on_get_report_clicked)
        buttons_layout.addWidget(get_report_button)
        
        get_version_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é")
        get_version_button.clicked.connect(self.on_get_version_clicked)
        buttons_layout.addWidget(get_version_button)
        
        get_orders_status_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤")
        get_orders_status_button.clicked.connect(self.on_get_orders_status_clicked)
        buttons_layout.addWidget(get_orders_status_button)
        
        create_emission_order_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç–º–∏—Å—Å–∏—é")
        create_emission_order_button.clicked.connect(self.on_create_emission_order_clicked)
        buttons_layout.addWidget(create_emission_order_button)
        
        orders_layout.addLayout(buttons_layout)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        details_layout.addWidget(QLabel("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:"))
        self.order_details_table = QTableWidget()
        self.order_details_table.setColumnCount(3)
        self.order_details_table.setHorizontalHeaderLabels(["GTIN", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–∞—Ç—É—Å"])
        details_layout.addWidget(self.order_details_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(orders_widget)
        splitter.addWidget(details_widget)
        splitter.setSizes([400, 200])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ –º–∞–∫–µ—Ç –≤–∫–ª–∞–¥–∫–∏
        layout.addWidget(splitter)
    
    def on_order_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected_rows = self.orders_table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            order_id = int(self.orders_table.item(row, 0).text())
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
            self.get_order_details_signal.emit(str(order_id))
    
    def update_order_details_table(self, products):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        self.order_details_table.setRowCount(len(products))
        for row, product in enumerate(products):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º GTIN, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            product_name = product.get("product_name", "") or product.get("gtin", "")
            self.order_details_table.setItem(row, 0, QTableWidgetItem(product_name))
            self.order_details_table.setItem(row, 1, QTableWidgetItem(str(product.get("quantity", ""))))
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.order_details_table.resizeColumnsToContents()
    
    def on_create_emission_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç–º–∏—Å—Å–∏—é –ö–ú"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from views.dialogs import EmissionOrderDialog
        from models.models import EmissionType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–ª–æ—Ç—ã
        # –í MainWindow –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ self.controller
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.load_api_logs_signal.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
        nomenclatures = []
        extensions = []
        countries = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.nomenclature_table.rowCount()):
            id_item = self.nomenclature_table.item(row, 0)
            name_item = self.nomenclature_table.item(row, 1)
            gtin_item = self.nomenclature_table.item(row, 2)
            group_item = self.nomenclature_table.item(row, 3)
            
            if id_item and name_item and gtin_item:
                from models.models import Nomenclature
                nomenclature = Nomenclature(
                    int(id_item.text()),
                    name_item.text(),
                    gtin_item.text(),
                    group_item.text() if group_item else ""
                )
                nomenclatures.append(nomenclature)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö API –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.extensions_table.rowCount()):
            id_item = self.extensions_table.item(row, 0)
            name_item = self.extensions_table.item(row, 1)
            is_active_item = self.extensions_table.item(row, 3)
            
            if id_item and name_item and is_active_item:
                from models.models import Extension
                extension = Extension(
                    int(id_item.text()),
                    name_item.text() if hasattr(name_item, 'text') else "",
                    name_item.text() if hasattr(name_item, 'text') else "",
                    is_active_item.text() == "–î–∞" if hasattr(is_active_item, 'text') else False
                )
                extensions.append(extension)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.countries_table.rowCount()):
            id_item = self.countries_table.item(row, 0)
            code_item = self.countries_table.item(row, 1)
            name_item = self.countries_table.item(row, 2)
            
            if id_item and code_item and name_item:
                from models.models import Country
                country = Country(
                    int(id_item.text()),
                    code_item.text(),
                    name_item.text()
                )
                countries.append(country)
        
        # –î–æ–±–∞–≤–∏–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
        if not countries:
            from models.models import Country
            default_countries = [
                Country(1, "BY", "–ë–µ–ª–∞—Ä—É—Å—å"),
                Country(2, "RU", "–†–æ—Å—Å–∏—è"),
                Country(3, "KZ", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
            ]
            countries.extend(default_countries)
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö —ç–º–∏—Å—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        # –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —ç–º–∏—Å—Å–∏–∏ –≤—Ä—É—á–Ω—É—é
        emission_types = [
            EmissionType(1, "PRODUCTION", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ", None),
            EmissionType(2, "IMPORT", "–í–≤–µ–∑–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–ò–º–ø–æ—Ä—Ç)", None),
            EmissionType(3, "REMAINS", "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤", "shoes"),
            EmissionType(4, "COMMISSION", "–ü—Ä–∏–Ω—è—Ç –Ω–∞ –∫–æ–º–º–∏—Å—Å–∏—é –æ—Ç —Ñ–∏–∑.–ª–∏—Ü–∞", "shoes"),
            EmissionType(5, "REMARK", "–ü–µ—Ä–µ–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", None)
        ]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if not extensions:
            from models.models import Extension
            default_extensions = [
                Extension(1, "pharma", "–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", True),
                Extension(2, "tobacco", "–¢–∞–±–∞—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", False),
                Extension(3, "shoes", "–û–±—É–≤—å", False),
                Extension(4, "tires", "–®–∏–Ω—ã", False),
                Extension(5, "lp", "–õ–µ–≥–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å", False),
                Extension(6, "perfum", "–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è", False),
                Extension(7, "photo", "–§–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", False),
                Extension(8, "milk", "–ú–æ–ª–æ—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è", False),
                Extension(9, "water", "–£–ø–∞–∫–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞", False)
            ]
            extensions.extend(default_extensions)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        dialog = EmissionOrderDialog(self, nomenclatures, extensions, emission_types, countries)
        if dialog.exec():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            order_data = dialog.get_data()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
            self.create_emission_order_signal.emit(order_data)

    def create_countries_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω"""
        self.countries_tab = QWidget()
        layout = QVBoxLayout(self.countries_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω
        self.countries_table = QTableWidget()
        self.countries_table.setColumnCount(3)
        self.countries_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ"])
        layout.addWidget(self.countries_table)
        
        # –í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –æ–±—ã—á–Ω–æ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫
        # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –æ–±—ã—á–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    def create_order_statuses_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        self.order_statuses_tab = QWidget()
        layout = QVBoxLayout(self.order_statuses_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        self.order_statuses_table = QTableWidget()
        self.order_statuses_table.setColumnCount(4)
        self.order_statuses_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        layout.addWidget(self.order_statuses_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(lambda: self.main_window.load_order_statuses_signal.emit())
        buttons_layout.addWidget(refresh_button)
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_order_status_clicked)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_order_status_clicked)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_order_status_clicked)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
        
    def reload_countries(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.countries_table
        self.countries_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.countries_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.countries_table.resizeColumnsToContents()
    
    def reload_nomenclature(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.nomenclature_table
        self.nomenclature_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.nomenclature_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.nomenclature_table.resizeColumnsToContents()
    
    def reload_order_statuses(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.order_statuses_table
        self.order_statuses_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.order_statuses_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.order_statuses_table.resizeColumnsToContents()

    def show_catalogs_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        dialog = CatalogsDialog(self)
        dialog.exec()
    
    def show_settings_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self)
        dialog.exec()

    def create_connections_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.connections_tab = QWidget()
        layout = QVBoxLayout(self.connections_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connections_table = QTableWidget()
        self.connections_table.setColumnCount(4)
        self.connections_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–ê–∫—Ç–∏–≤–Ω—ã–π"])
        layout.addWidget(self.connections_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
        self.connections_buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_connection_clicked)
        self.connections_buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_connection_clicked)
        self.connections_buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_connection_clicked)
        self.connections_buttons_layout.addWidget(delete_button)
        
        set_active_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_connection_clicked)
        self.connections_buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(self.connections_buttons_layout)

    def create_credentials_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_tab = QWidget()
        layout = QVBoxLayout(self.credentials_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.credentials_table = QTableWidget()
        self.credentials_table.setColumnCount(4)
        self.credentials_table.setHorizontalHeaderLabels(["ID", "OMS ID", "–¢–æ–∫–µ–Ω", "GLN"])
        layout.addWidget(self.credentials_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.credentials_buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_credentials_clicked)
        self.credentials_buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_credentials_clicked)
        self.credentials_buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_credentials_clicked)
        self.credentials_buttons_layout.addWidget(delete_button)
        
        layout.addLayout(self.credentials_buttons_layout)

    def create_nomenclature_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        self.nomenclature_tab = QWidget()
        layout = QVBoxLayout(self.nomenclature_tab)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.nomenclature_table = QTableWidget()
        self.nomenclature_table.setColumnCount(4)
        self.nomenclature_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "GTIN", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        layout.addWidget(self.nomenclature_table)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
        buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_nomenclature_clicked)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_nomenclature_clicked)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_nomenclature_clicked)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
    
    def on_add_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        code, ok = QInputDialog.getText(
            self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
        )
        
        if ok and code:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            name, ok = QInputDialog.getText(
                self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
            )
            
            if ok and name:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                description, ok = QInputDialog.getText(
                    self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
                )
                
                if ok:
                    # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                    # –í–∞–∂–Ω–æ: –Ω–µ self.main_window.add_order_status_signal.emit,
                    # –∞ –∏–º–µ–Ω–Ω–æ self.main_window.add_order_status_signal –Ω–∞–ø—Ä—è–º—É—é
                    self.main_window.add_order_status_signal.emit(code, name, description)
    
    def on_edit_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        
        row = self.order_statuses_table.currentRow()
        if row >= 0:
            status_id = int(self.order_statuses_table.item(row, 0).text())
            code = self.order_statuses_table.item(row, 1).text()
            name = self.order_statuses_table.item(row, 2).text()
            description = self.order_statuses_table.item(row, 3).text() if self.order_statuses_table.item(row, 3) else ""
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
            new_code, ok = QInputDialog.getText(
                self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, code
            )
            
            if ok and new_code:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                new_name, ok = QInputDialog.getText(
                    self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, name
                )
                
                if ok and new_name:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    new_description, ok = QInputDialog.getText(
                        self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, description
                    )
                    
                    if ok:
                        # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                        self.main_window.edit_order_status_signal.emit(status_id, new_code, new_name, new_description)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        row = self.order_statuses_table.currentRow()
        if row >= 0:
            status_id = int(self.order_statuses_table.item(row, 0).text())
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.main_window.delete_order_status_signal.emit(status_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def update_api_orders_table(self, order_infos):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã API –∑–∞–∫–∞–∑–æ–≤
        
        Args:
            order_infos (List[Dict]): –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ API
        """
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.api_orders_table.setRowCount(0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.api_orders_table.setColumnCount(10)
        self.api_orders_table.setHorizontalHeaderLabels([
            "ID –∑–∞–∫–∞–∑–∞", "–°—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞", "–°–æ–∑–¥–∞–Ω", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", 
            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ü–æ–¥–ø–∏—Å–∞–Ω", "–ü—Ä–æ–≤–µ—Ä–µ–Ω", "–ë—É—Ñ–µ—Ä—ã"
        ])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
        for i, order_info in enumerate(order_infos):
            self.api_orders_table.insertRow(i)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
            is_obsolete = order_info.get("orderStatus", "") == "OBSOLETE"
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            self.api_orders_table.setItem(i, 0, QTableWidgetItem(str(order_info.get("orderId", ""))))
            
            # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö
            status_item = QTableWidgetItem(str(order_info.get("orderStatus", "")))
            if is_obsolete:
                status_item.setBackground(QColor(255, 200, 200))  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            self.api_orders_table.setItem(i, 1, status_item)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.api_orders_table.setItem(i, 2, QTableWidgetItem(str(order_info.get("orderStatusDescription", ""))))
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            self.api_orders_table.setItem(i, 3, QTableWidgetItem(str(order_info.get("createdTimestamp", ""))))
            self.api_orders_table.setItem(i, 4, QTableWidgetItem(str(order_info.get("totalQuantity", 0))))
            self.api_orders_table.setItem(i, 5, QTableWidgetItem(str(order_info.get("numOfProducts", 0))))
            self.api_orders_table.setItem(i, 6, QTableWidgetItem(str(order_info.get("productGroupType", ""))))
            self.api_orders_table.setItem(i, 7, QTableWidgetItem(str(order_info.get("signed", False))))
            self.api_orders_table.setItem(i, 8, QTableWidgetItem(str(order_info.get("verified", False))))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±—É—Ñ–µ—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
            buffers = order_info.get("buffers", [])
            buffers_text = str(len(buffers)) if buffers else "0"
            self.api_orders_table.setItem(i, 9, QTableWidgetItem(buffers_text))
            
            # –î–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Ä–æ–π
            if is_obsolete:
                for col in range(self.api_orders_table.columnCount()):
                    item = self.api_orders_table.item(i, col)
                    if item:
                        item.setForeground(QColor(128, 128, 128))  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.api_orders_table.resizeColumnsToContents()
    
    def set_api_orders_status(self, status_message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            status_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ API –∑–∞–∫–∞–∑–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ label –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ API –∑–∞–∫–∞–∑–æ–≤
        if hasattr(self, 'api_orders_status_label'):
            self.api_orders_status_label.setText(status_message)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π label –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ api_orders_tab_layout
            self.api_orders_status_label = QLabel(status_message)
            self.api_orders_status_label.setStyleSheet("color: #333; font-size: 11px;")
            if hasattr(self, 'api_orders_tab_layout'):
                self.api_orders_tab_layout.addWidget(self.api_orders_status_label)

    def on_delete_api_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è API –∑–∞–∫–∞–∑–∞"""
        selected_rows = self.api_orders_table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            order_id = self.api_orders_table.item(row, 0).text()
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è API –∑–∞–∫–∞–∑–∞
                self.delete_api_order_signal.emit(order_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def create_api_orders_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ API –∑–∞–∫–∞–∑–æ–≤"""
        self.api_orders_tab = QWidget()
        self.api_orders_tab_layout = QVBoxLayout(self.api_orders_tab)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_label = QLabel("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ API –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã'. \n"
                          "–ó–∞–∫–∞–∑—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏ –≤—ã–¥–µ–ª–µ–Ω—ã —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º.")
        info_label.setStyleSheet("color: #666; font-style: italic;")
        self.api_orders_tab_layout.addWidget(info_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        splitter = QSplitter(Qt.Orientation.Vertical)
        orders_widget = QWidget()
        orders_layout = QVBoxLayout(orders_widget)
        
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.api_orders_table = QTableWidget()
        self.api_orders_table.setColumnCount(10)
        self.api_orders_table.setHorizontalHeaderLabels([
            "ID –∑–∞–∫–∞–∑–∞", "–°—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞", "–°–æ–∑–¥–∞–Ω", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", 
            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ü–æ–¥–ø–∏—Å–∞–Ω", "–ü—Ä–æ–≤–µ—Ä–µ–Ω", "–ë—É—Ñ–µ—Ä—ã"
        ])
        self.api_orders_table.itemSelectionChanged.connect(self.on_api_order_selected)
        orders_layout.addWidget(self.api_orders_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã")
        refresh_button.clicked.connect(self.api_orders_signal.emit)
        buttons_layout.addWidget(refresh_button)
        
        create_order_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç–º–∏—Å—Å–∏—é")
        create_order_button.clicked.connect(self.on_create_emission_order_clicked)
        buttons_layout.addWidget(create_order_button)
        
        get_km_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –ö–ú –∏–∑ –∑–∞–∫–∞–∑–∞")
        get_km_button.clicked.connect(self.on_get_km_from_order_clicked)
        buttons_layout.addWidget(get_km_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
        delete_button.clicked.connect(self.on_delete_api_order_clicked)
        buttons_layout.addWidget(delete_button)
        
        orders_layout.addLayout(buttons_layout)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–±—É—Ñ–µ—Ä—ã)
        details_layout.addWidget(QLabel("–ë—É—Ñ–µ—Ä—ã –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏:"))
        self.api_buffers_table = QTableWidget()
        self.api_buffers_table.setColumnCount(9)
        self.api_buffers_table.setHorizontalHeaderLabels([
            "ID –∑–∞–∫–∞–∑–∞", "GTIN", "–û—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ", "–ü—É–ª—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã", 
            "–í—Å–µ–≥–æ –∫–æ–¥–æ–≤", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã", 
            "–í—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω–æ", "OMS ID"
        ])
        details_layout.addWidget(self.api_buffers_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(orders_widget)
        splitter.addWidget(details_widget)
        splitter.setSizes([400, 200])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ –º–∞–∫–µ—Ç –≤–∫–ª–∞–¥–∫–∏
        self.api_orders_tab_layout.addWidget(splitter)
    
    def on_api_order_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ API –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected_rows = self.api_orders_table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–∞—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏
            order_id = self.api_orders_table.item(row, 0).text()
            
            # –ü–æ–ª—É—á–∞–µ–º API –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                api_orders = self.db.get_api_orders()
                for api_order in api_orders:
                    if api_order.order_id == order_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                        self.update_api_buffers_table(api_order.buffers)
                        return
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                self.update_api_buffers_table([])
    
    def update_api_buffers_table(self, buffers):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ API –∑–∞–∫–∞–∑–∞
        
        Args:
            buffers (List[Dict]): –°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        """
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.api_buffers_table.setRowCount(0)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å JSON
        self.api_buffers_table.setColumnCount(9)
        self.api_buffers_table.setHorizontalHeaderLabels([
            "ID –∑–∞–∫–∞–∑–∞", "GTIN", "–û—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ", "–ü—É–ª—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã", 
            "–í—Å–µ–≥–æ –∫–æ–¥–æ–≤", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã", 
            "–í—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω–æ", "OMS ID"
        ])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
        for i, buffer in enumerate(buffers):
            self.api_buffers_table.insertRow(i)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É JSON
            self.api_buffers_table.setItem(i, 0, QTableWidgetItem(str(buffer.get("orderId", ""))))
            self.api_buffers_table.setItem(i, 1, QTableWidgetItem(str(buffer.get("gtin", ""))))
            self.api_buffers_table.setItem(i, 2, QTableWidgetItem(str(buffer.get("leftInBuffer", 0))))
            self.api_buffers_table.setItem(i, 3, QTableWidgetItem("–î–∞" if buffer.get("poolsExhausted", False) else "–ù–µ—Ç"))
            self.api_buffers_table.setItem(i, 4, QTableWidgetItem(str(buffer.get("totalCodes", 0))))
            self.api_buffers_table.setItem(i, 5, QTableWidgetItem(str(buffer.get("unavailableCodes", 0))))
            self.api_buffers_table.setItem(i, 6, QTableWidgetItem(str(buffer.get("availableCodes", 0))))
            self.api_buffers_table.setItem(i, 7, QTableWidgetItem(str(buffer.get("totalPassed", 0))))
            self.api_buffers_table.setItem(i, 8, QTableWidgetItem(str(buffer.get("omsId", ""))))
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.api_buffers_table.resizeColumnsToContents()
    
    def get_status_display_name(self, status_code):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∫–æ–¥—É"""
        status_map = {
            "CREATED": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
            "PENDING": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "DECLINED": "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
            "APPROVED": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
            "READY": "–ì–æ—Ç–æ–≤",
            "CLOSED": "–ó–∞–∫—Ä—ã—Ç",
            "UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        }
        return status_map.get(status_code, status_code)
    
    def update_order_statuses_table(self, statuses):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        self.order_statuses_table.setRowCount(len(statuses))
        for row, status in enumerate(statuses):
            self.order_statuses_table.setItem(row, 0, QTableWidgetItem(str(status.id)))
            self.order_statuses_table.setItem(row, 1, QTableWidgetItem(status.code))
            self.order_statuses_table.setItem(row, 2, QTableWidgetItem(status.name))
            self.order_statuses_table.setItem(row, 3, QTableWidgetItem(status.description))

    def on_get_km_from_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ú –∏–∑ –∑–∞–∫–∞–∑–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        selected_rows = self.api_orders_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ö–ú")
            return
            
        row = selected_rows[0].row()
        order_id = self.api_orders_table.item(row, 0).text()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å READY
        status = self.api_orders_table.item(row, 1).text()
        if status != "READY":
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ö–ú –∏–∑ –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'. –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'READY'.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        gtins = []
        try:
            api_orders = self.db.get_api_orders()
            for api_order in api_orders:
                if api_order.order_id == order_id:
                    # –°–æ–±–∏—Ä–∞–µ–º GTIN—ã –∏–∑ –±—É—Ñ–µ—Ä–æ–≤
                    for buffer in api_order.buffers:
                        gtin = buffer.get("gtin")
                        if gtin and gtin not in gtins:
                            gtins.append(gtin)
                    break
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É—Ñ–µ—Ä–∞—Ö: {str(e)}")
            return
        
        # –ï—Å–ª–∏ GTIN—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not gtins:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã GTIN—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
            return
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ GTIN –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ö–ú
        from views.dialogs import GetKMDialog
        dialog = GetKMDialog(self, order_id, gtins)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "OK", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ö–ú
        if dialog.exec():
            data = dialog.get_data()
            gtin = data.get("gtin")
            quantity = data.get("quantity")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ö–ú
            self.get_km_from_order_signal.emit(order_id, gtin, quantity)
    
    def display_codes_from_order(self, order_id, gtin, codes):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ö–ú –∏–∑ –∑–∞–∫–∞–∑–∞
        
        Args:
            order_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            gtin (str): GTIN —Ç–æ–≤–∞—Ä–∞
            codes (List[str]): –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        """
        from views.dialogs import DisplayCodesDialog
        dialog = DisplayCodesDialog(self, order_id, gtin, codes)
        dialog.exec()

    def create_marking_codes_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        self.marking_codes_tab = QWidget()
        layout = QVBoxLayout(self.marking_codes_tab)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters_layout = QHBoxLayout()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ GTIN
        gtin_layout = QHBoxLayout()
        gtin_label = QLabel("GTIN:")
        self.gtin_filter = QLineEdit()
        self.gtin_filter.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ GTIN –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        gtin_layout.addWidget(gtin_label)
        gtin_layout.addWidget(self.gtin_filter)
        filters_layout.addLayout(gtin_layout)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ ID –∑–∞–∫–∞–∑–∞
        order_id_layout = QHBoxLayout()
        order_id_label = QLabel("ID –∑–∞–∫–∞–∑–∞:")
        self.order_id_filter = QLineEdit()
        self.order_id_filter.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        order_id_layout.addWidget(order_id_label)
        order_id_layout.addWidget(self.order_id_filter)
        filters_layout.addLayout(order_id_layout)
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.used_filter = QCheckBox("–¢–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ")
        self.used_filter.setChecked(True)
        filters_layout.addWidget(self.used_filter)
        
        self.exported_filter = QCheckBox("–¢–æ–ª—å–∫–æ –Ω–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
        self.exported_filter.setChecked(True)
        filters_layout.addWidget(self.exported_filter)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        apply_filter_button = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        apply_filter_button.clicked.connect(self.on_apply_marking_codes_filter)
        filters_layout.addWidget(apply_filter_button)
        
        layout.addLayout(filters_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.marking_codes_table = QTableWidget()
        self.marking_codes_table.setColumnCount(7)
        self.marking_codes_table.setHorizontalHeaderLabels([
            "ID", "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "GTIN", "ID –∑–∞–∫–∞–∑–∞", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", "–°–æ–∑–¥–∞–Ω"
        ])
        layout.addWidget(self.marking_codes_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.on_refresh_marking_codes)
        buttons_layout.addWidget(refresh_button)
        
        export_button = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        export_button.clicked.connect(self.on_export_marking_codes)
        buttons_layout.addWidget(export_button)
        
        mark_used_button = QPushButton("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ")
        mark_used_button.clicked.connect(self.on_mark_codes_as_used)
        buttons_layout.addWidget(mark_used_button)
        
        layout.addLayout(buttons_layout)
        
    def on_apply_marking_codes_filter(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        gtin = self.gtin_filter.text().strip() if self.gtin_filter.text().strip() else None
        order_id = self.order_id_filter.text().strip() if self.order_id_filter.text().strip() else None
        used = not self.used_filter.isChecked()  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, —Ç.–∫. —á–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ"
        exported = not self.exported_filter.isChecked()  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º, —Ç.–∫. —á–µ–∫–±–æ–∫—Å "–¢–æ–ª—å–∫–æ –Ω–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        self.get_marking_codes_signal.emit({"gtin": gtin, "order_id": order_id, "used": used, "exported": exported})
    
    def on_refresh_marking_codes(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        self.on_apply_marking_codes_filter()
    
    def on_export_marking_codes(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = self.marking_codes_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–¥—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID –∏ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        code_ids = []
        codes = []
        rows = set()
        
        for item in selected_rows:
            row = item.row()
            if row not in rows:
                rows.add(row)
                code_id = int(self.marking_codes_table.item(row, 0).text())
                code = self.marking_codes_table.item(row, 1).text()
                code_ids.append(code_id)
                codes.append(code)
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–¥—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if codes:
            from views.dialogs import DisplayCodesDialog
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è GTIN –∏ order_id
            gtin = self.marking_codes_table.item(list(rows)[0], 2).text()
            order_id = self.marking_codes_table.item(list(rows)[0], 3).text()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–æ–≤
            dialog = DisplayCodesDialog(self, order_id, gtin, codes)
            result = dialog.exec()
            
            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª –ø—Ä–∏–Ω—è—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–¥–æ–≤ –∫–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if result:
                self.mark_codes_as_exported_signal.emit(code_ids)
    
    def on_mark_codes_as_used(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–¥–æ–≤ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = self.marking_codes_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–¥—ã –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID
        code_ids = []
        rows = set()
        
        for item in selected_rows:
            row = item.row()
            if row not in rows:
                rows.add(row)
                code_id = int(self.marking_codes_table.item(row, 0).text())
                code_ids.append(code_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å {len(code_ids)} –∫–æ–¥–æ–≤ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–¥–æ–≤ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            self.mark_codes_as_used_signal.emit(code_ids)
    
    def update_marking_codes_table(self, codes):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        
        Args:
            codes (List[Dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        """
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.marking_codes_table.setRowCount(0)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
        for i, code_data in enumerate(codes):
            self.marking_codes_table.insertRow(i)
            
            # ID
            self.marking_codes_table.setItem(i, 0, QTableWidgetItem(str(code_data["id"])))
            
            # –ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            code_item = QTableWidgetItem(code_data["code"])
            # –ï—Å–ª–∏ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –¥–µ–ª–∞–µ–º –µ–≥–æ —Å–µ—Ä—ã–º
            if code_data["used"]:
                code_item.setForeground(QColor(150, 150, 150))
            self.marking_codes_table.setItem(i, 1, code_item)
            
            # GTIN
            self.marking_codes_table.setItem(i, 2, QTableWidgetItem(code_data["gtin"]))
            
            # ID –∑–∞–∫–∞–∑–∞
            self.marking_codes_table.setItem(i, 3, QTableWidgetItem(code_data["order_id"]))
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            used_item = QTableWidgetItem("–î–∞" if code_data["used"] else "–ù–µ—Ç")
            if code_data["used"]:
                used_item.setForeground(QColor(150, 150, 150))
            self.marking_codes_table.setItem(i, 4, used_item)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            exported_item = QTableWidgetItem("–î–∞" if code_data["exported"] else "–ù–µ—Ç")
            if code_data["exported"]:
                exported_item.setForeground(QColor(150, 150, 150))
            self.marking_codes_table.setItem(i, 5, exported_item)
            
            # –°–æ–∑–¥–∞–Ω
            self.marking_codes_table.setItem(i, 6, QTableWidgetItem(code_data["created_at"]))
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.marking_codes_table.resizeColumnsToContents()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if codes:
            self.tabs.setTabText(self.tabs.indexOf(self.marking_codes_tab), f"–ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ ({len(codes)})")
        else:
            self.tabs.setTabText(self.tabs.indexOf(self.marking_codes_tab), "–ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")

    def create_aggregation_files_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        self.aggregation_files_tab = QWidget()
        layout = QVBoxLayout(self.aggregation_files_tab)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.aggregation_files_table = QTableWidget()
        self.aggregation_files_table.setColumnCount(6)
        self.aggregation_files_table.setHorizontalHeaderLabels([
            "–ò–º—è —Ñ–∞–π–ª–∞", "–ü—Ä–æ–¥—É–∫—Ü–∏—è", "–ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "–ö–æ–¥—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 1 —É—Ä–æ–≤–Ω—è", 
            "–ö–æ–¥—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 2 —É—Ä–æ–≤–Ω—è", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        ])
        self.aggregation_files_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.aggregation_files_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.aggregation_files_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.aggregation_files_table.customContextMenuRequested.connect(self.show_aggregation_file_context_menu)
        
        layout.addWidget(self.aggregation_files_table)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        button_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        load_file_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        load_file_button.clicked.connect(self.on_load_aggregation_file)
        button_layout.addWidget(load_file_button)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏
        send_utilisation_report_button = QPushButton("–û—Ç—á–µ—Ç –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏")
        send_utilisation_report_button.clicked.connect(self.on_send_utilisation_report)
        button_layout.addWidget(send_utilisation_report_button)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.load_aggregation_files_signal.emit)
        button_layout.addWidget(refresh_button)
        
        layout.addLayout(button_layout)

    def on_send_utilisation_report(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç—á–µ—Ç –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏'"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        if not self.aggregation_files_table.selectedItems():
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        row = self.aggregation_files_table.selectedItems()[0].row()
        file_id = int(self.aggregation_files_table.item(row, 0).data(Qt.ItemDataRole.UserRole))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —è–≤–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        dialog = UtilisationReportDialog(file_id, self, self.controller)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            report_data = dialog.get_report_data()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞
            self.send_utilisation_report_signal.emit(report_data)

    def show_aggregation_file_context_menu(self, position):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        menu = QMenu()
        export_action = menu.addAction("–í—ã–≥—Ä—É–∑–∏—Ç—å JSON")
        utilisation_action = menu.addAction("–û—Ç—á–µ—Ç –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏")
        delete_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        if not self.aggregation_files_table.selectedItems():
            export_action.setEnabled(False)
            utilisation_action.setEnabled(False)
            delete_action.setEnabled(False)
        
        action = menu.exec(self.aggregation_files_table.mapToGlobal(position))
        
        if not self.aggregation_files_table.selectedItems():
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–µ–≥–µ)
        row = self.aggregation_files_table.selectedItems()[0].row()
        file_id = int(self.aggregation_files_table.item(row, 0).data(Qt.ItemDataRole.UserRole))
        
        if action == export_action:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–í—ã–≥—Ä—É–∑–∏—Ç—å JSON-—Ñ–∞–π–ª",
                f"{self.aggregation_files_table.item(row, 0).text()}.json",
                "JSON —Ñ–∞–π–ª—ã (*.json)"
            )
            
            if file_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
                self.export_aggregation_file_signal.emit(file_id, file_path)
        
        elif action == utilisation_action:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏
            self.on_send_utilisation_report()
        
        elif action == delete_action:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            ) == QMessageBox.StandardButton.Yes:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                self.delete_aggregation_file_signal.emit(file_id)

    def on_load_aggregation_file(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
            "",
            "JSON —Ñ–∞–π–ª—ã (*.json)"
        )
        
        if file_path:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment, ok = QInputDialog.getText(
                self,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É:"
            )
            
            if ok:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª OK
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
                    filename = os.path.basename(file_path)
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
                    with open(file_path, 'r', encoding='utf-8') as file:
                        json_text = file.read()
                    data = json.loads(json_text)
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                    logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {json_text[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    self.add_aggregation_file_signal.emit(filename, data, comment)
                    
                except json.JSONDecodeError as e:
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞",
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞: {str(e)}"
                    )
                except Exception as e:
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞",
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                    )

    def update_aggregation_files_table(self, files):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        
        Args:
            files (List[AggregationFile]): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        """
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∞–π–ª–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏. –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤.")
        
        self.aggregation_files_table.setRowCount(0)  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        
        for file in files:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {file.filename}")
            logging.info(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è: {file.product}")
            logging.info(f"–ö–æ–ª-–≤–æ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏: {len(file.marking_codes)}")
            logging.info(f"–ö–æ–ª-–≤–æ –∫–æ–¥–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 1 —É—Ä–æ–≤–Ω—è: {len(file.level1_codes)}")
            logging.info(f"–ö–æ–ª-–≤–æ –∫–æ–¥–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 2 —É—Ä–æ–≤–Ω—è: {len(file.level2_codes)}")
            
            row = self.aggregation_files_table.rowCount()
            self.aggregation_files_table.insertRow(row)
            
            # –ò–º—è —Ñ–∞–π–ª–∞
            item = QTableWidgetItem(file.filename)
            item.setData(Qt.ItemDataRole.UserRole, file.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Ç–µ–≥–µ
            self.aggregation_files_table.setItem(row, 0, item)
            
            # –ü—Ä–æ–¥—É–∫—Ü–∏—è
            item = QTableWidgetItem(file.product)
            self.aggregation_files_table.setItem(row, 1, item)
            
            # –ö–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            item = QTableWidgetItem(str(len(file.marking_codes)))
            self.aggregation_files_table.setItem(row, 2, item)
            
            # –ö–æ–¥—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 1 —É—Ä–æ–≤–Ω—è
            item = QTableWidgetItem(str(len(file.level1_codes)))
            self.aggregation_files_table.setItem(row, 3, item)
            
            # –ö–æ–¥—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ 2 —É—Ä–æ–≤–Ω—è
            item = QTableWidgetItem(str(len(file.level2_codes)))
            self.aggregation_files_table.setItem(row, 4, item)
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            item = QTableWidgetItem(file.comment)
            self.aggregation_files_table.setItem(row, 5, item)
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.aggregation_files_table.resizeColumnsToContents()

class CatalogsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")
        self.resize(800, 600)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_window = parent
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫ —Å–ª–æ—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        self.main_window.add_nomenclature_signal.connect(self.reload_nomenclature)
        self.main_window.edit_nomenclature_signal.connect(self.reload_nomenclature)
        self.main_window.delete_nomenclature_signal.connect(self.reload_nomenclature)
        self.main_window.set_active_extension_signal.connect(self.reload_extensions)
        self.main_window.load_countries_signal.connect(self.reload_countries)
        self.main_window.load_order_statuses_signal.connect(self.reload_order_statuses)
        self.main_window.add_order_status_signal.connect(self.reload_order_statuses)
        self.main_window.edit_order_status_signal.connect(self.reload_order_statuses)
        self.main_window.delete_order_status_signal.connect(self.reload_order_statuses)
        
        layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_nomenclature_tab()
        self.create_extensions_tab()
        self.create_countries_tab()
        self.create_order_statuses_tab()
        self.create_usage_types_tab()  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –≤–∏–¥–∂–µ—Ç
        self.tabs.addTab(self.nomenclature_tab, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞")
        self.tabs.addTab(self.extensions_tab, "–í–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        self.tabs.addTab(self.countries_tab, "–°—Ç—Ä–∞–Ω—ã")
        self.tabs.addTab(self.order_statuses_tab, "–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤")
        self.tabs.addTab(self.usage_types_tab, "–¢–∏–ø—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Close)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.tabs.currentChanged.connect(self.on_tab_changed)
    
    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞
        self.reload_nomenclature()
        self.reload_extensions()
        self.reload_countries()
        self.reload_order_statuses()
        self.reload_usage_types()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        super().showEvent(event)
    
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –Ω–µ–µ
        if index == 0:  # –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
            self.reload_nomenclature()
        elif index == 1:  # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
            self.reload_extensions()
        elif index == 2:  # –°—Ç—Ä–∞–Ω—ã
            self.reload_countries()
        elif index == 3:  # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
            self.reload_order_statuses()
        elif index == 4:  # –¢–∏–ø—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.reload_usage_types()

    def create_nomenclature_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        self.nomenclature_tab = QWidget()
        layout = QVBoxLayout(self.nomenclature_tab)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.nomenclature_table = QTableWidget()
        self.nomenclature_table.setColumnCount(4)
        self.nomenclature_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "GTIN", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        layout.addWidget(self.nomenclature_table)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
        buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_nomenclature_clicked)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_nomenclature_clicked)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_nomenclature_clicked)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
    
    def create_extensions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API"""
        self.extensions_tab = QWidget()
        layout = QVBoxLayout(self.extensions_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API
        self.extensions_table = QTableWidget()
        self.extensions_table.setColumnCount(4)
        self.extensions_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ê–∫—Ç–∏–≤–Ω—ã–π"])
        layout.addWidget(self.extensions_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ API
        buttons_layout = QHBoxLayout()
        
        set_active_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_extension)
        buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(buttons_layout)
    
    def on_set_active_extension(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        row = self.extensions_table.currentRow()
        if row >= 0:
            extension_id = int(self.extensions_table.item(row, 0).text())
            self.main_window.set_active_extension_signal.emit(extension_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def reload_extensions(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.extensions_table
        self.extensions_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.extensions_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.extensions_table.resizeColumnsToContents()
    
    def create_countries_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω"""
        self.countries_tab = QWidget()
        layout = QVBoxLayout(self.countries_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω
        self.countries_table = QTableWidget()
        self.countries_table.setColumnCount(3)
        self.countries_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ"])
        layout.addWidget(self.countries_table)
        
        # –í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –æ–±—ã—á–Ω–æ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫
        # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –æ–±—ã—á–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    def create_order_statuses_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        self.order_statuses_tab = QWidget()
        layout = QVBoxLayout(self.order_statuses_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        self.order_statuses_table = QTableWidget()
        self.order_statuses_table.setColumnCount(4)
        self.order_statuses_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        layout.addWidget(self.order_statuses_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(lambda: self.main_window.load_order_statuses_signal.emit())
        buttons_layout.addWidget(refresh_button)
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_order_status_clicked)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_order_status_clicked)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_order_status_clicked)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
        
    def reload_countries(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.countries_table
        self.countries_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.countries_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.countries_table.resizeColumnsToContents()
    
    def reload_nomenclature(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.nomenclature_table
        self.nomenclature_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.nomenclature_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.nomenclature_table.resizeColumnsToContents()
    
    def reload_order_statuses(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.order_statuses_table
        self.order_statuses_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.order_statuses_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.order_statuses_table.resizeColumnsToContents()

    def on_add_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API
        extensions = []
        source_table = self.main_window.extensions_table
        for row in range(source_table.rowCount()):
            extension_id = int(source_table.item(row, 0).text())
            extension_name = source_table.item(row, 1).text()
            extension_code = source_table.item(row, 2).text()
            is_active = source_table.item(row, 3).text() == "–î–∞"
            extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
        
        dialog = NomenclatureDialog(self, extensions=extensions)
        if dialog.exec():
            data = dialog.get_data()
            self.main_window.add_nomenclature_signal.emit(data['name'], data['gtin'], data['product_group'])
    
    def on_edit_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            name = self.nomenclature_table.item(row, 1).text()
            gtin = self.nomenclature_table.item(row, 2).text()
            product_group = self.nomenclature_table.item(row, 3).text() if self.nomenclature_table.item(row, 3) else ""
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            nomenclature = Nomenclature(nomenclature_id, name, gtin, product_group)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
            extensions = []
            source_table = self.main_window.extensions_table
            for row in range(source_table.rowCount()):
                extension_id = int(source_table.item(row, 0).text())
                extension_name = source_table.item(row, 1).text()
                extension_code = source_table.item(row, 2).text()
                is_active = source_table.item(row, 3).text() == "–î–∞"
                extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dialog = NomenclatureDialog(self, nomenclature=nomenclature, extensions=extensions)
            if dialog.exec():
                data = dialog.get_data()
                self.main_window.edit_nomenclature_signal.emit(nomenclature_id, data['name'], data['gtin'], data['product_group'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            self.main_window.delete_nomenclature_signal.emit(nomenclature_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def on_add_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        code, ok = QInputDialog.getText(
            self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
        )
        
        if ok and code:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            name, ok = QInputDialog.getText(
                self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
            )
            
            if ok and name:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                description, ok = QInputDialog.getText(
                    self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal
                )
                
                if ok:
                    # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    self.main_window.add_order_status_signal.emit(code, name, description)
    
    def on_edit_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        
        row = self.order_statuses_table.currentRow()
        if row >= 0:
            status_id = int(self.order_statuses_table.item(row, 0).text())
            code = self.order_statuses_table.item(row, 1).text()
            name = self.order_statuses_table.item(row, 2).text()
            description = self.order_statuses_table.item(row, 3).text() if self.order_statuses_table.item(row, 3) else ""
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
            new_code, ok = QInputDialog.getText(
                self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, code
            )
            
            if ok and new_code:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                new_name, ok = QInputDialog.getText(
                    self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, name
                )
                
                if ok and new_name:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    new_description, ok = QInputDialog.getText(
                        self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", QLineEdit.EchoMode.Normal, description
                    )
                    
                    if ok:
                        # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                        self.main_window.edit_order_status_signal.emit(status_id, new_code, new_name, new_description)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_order_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        row = self.order_statuses_table.currentRow()
        if row >= 0:
            status_id = int(self.order_statuses_table.item(row, 0).text())
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                self.main_window.delete_order_status_signal.emit(status_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def create_usage_types_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        self.usage_types_tab = QWidget()
        layout = QVBoxLayout(self.usage_types_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_types_table = QTableWidget()
        self.usage_types_table.setColumnCount(4)
        self.usage_types_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        layout.addWidget(self.usage_types_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.reload_usage_types)
        buttons_layout.addWidget(refresh_button)
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_usage_type_clicked)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_usage_type_clicked)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_usage_type_clicked)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
    
    def reload_usage_types(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            import logging
            logger = logging.getLogger(__name__)
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            if not hasattr(self.main_window, 'controller') or not self.main_window.controller:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            usage_types = self.main_window.controller.load_usage_types()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.usage_types_table.setRowCount(0)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            for i, usage_type in enumerate(usage_types):
                self.usage_types_table.insertRow(i)
                
                # ID
                id_item = QTableWidgetItem(str(usage_type.id))
                self.usage_types_table.setItem(i, 0, id_item)
                
                # –ö–æ–¥
                code_item = QTableWidgetItem(usage_type.code)
                self.usage_types_table.setItem(i, 1, code_item)
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                name_item = QTableWidgetItem(usage_type.name)
                self.usage_types_table.setItem(i, 2, name_item)
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                description_item = QTableWidgetItem(usage_type.description or "")
                self.usage_types_table.setItem(i, 3, description_item)
            
            # –ü–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self.usage_types_table.resizeColumnsToContents()
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(usage_types)} —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    def on_add_usage_type_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        import logging
        
        logger = logging.getLogger(__name__)
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            code, ok = QInputDialog.getText(
                self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal
            )
            
            if ok and code:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                name, ok = QInputDialog.getText(
                    self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal
                )
                
                if ok and name:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    description, ok = QInputDialog.getText(
                        self, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal
                    )
                    
                    if ok:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
                        if not code.strip():
                            logger.error("–ö–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ö–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                            return
                        
                        if not name.strip():
                            logger.error("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                            return
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ add_usage_type_signal: –∫–æ–¥={code}, –Ω–∞–∑–≤–∞–Ω–∏–µ={name}")
                        self.main_window.add_usage_type_signal.emit(code, name, description or "")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                        QTimer.singleShot(500, self.reload_usage_types)
        except Exception as e:
            logger.exception(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def on_edit_usage_type_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        from PyQt6.QtWidgets import QInputDialog, QLineEdit
        
        row = self.usage_types_table.currentRow()
        if row >= 0:
            usage_type_id = int(self.usage_types_table.item(row, 0).text())
            code = self.usage_types_table.item(row, 1).text()
            name = self.usage_types_table.item(row, 2).text()
            description = self.usage_types_table.item(row, 3).text() if self.usage_types_table.item(row, 3) else ""
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            new_code, ok = QInputDialog.getText(
                self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal, code
            )
            
            if ok and new_code:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                new_name, ok = QInputDialog.getText(
                    self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal, name
                )
                
                if ok and new_name:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    new_description, ok = QInputDialog.getText(
                        self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", QLineEdit.EchoMode.Normal, description
                    )
                    
                    if ok:
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                            if self.main_window.controller:
                                self.main_window.controller.update_usage_type(usage_type_id, new_code, new_name, new_description)
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                                self.reload_usage_types()
                        except Exception as e:
                            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_usage_type_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        row = self.usage_types_table.currentRow()
        if row >= 0:
            usage_type_id = int(self.usage_types_table.item(row, 0).text())
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                try:
                    # –£–¥–∞–ª—è–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                    if self.main_window.controller:
                        self.main_window.controller.delete_usage_type(usage_type_id)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                        self.reload_usage_types()
                except Exception as e:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {str(e)}")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

class SettingsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.resize(800, 600)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_window = parent
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫ —Å–ª–æ—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        self.main_window.add_connection_signal.connect(self.reload_connections)
        self.main_window.edit_connection_signal.connect(self.reload_connections)
        self.main_window.delete_connection_signal.connect(self.reload_connections)
        self.main_window.set_active_connection_signal.connect(self.reload_connections)
        self.main_window.add_credentials_signal.connect(self.reload_credentials)
        self.main_window.edit_credentials_signal.connect(self.reload_credentials)
        self.main_window.delete_credentials_signal.connect(self.reload_credentials)
        
        layout = QVBoxLayout(self)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_connections_tab()
        self.create_credentials_tab()
        self.create_general_settings_tab()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –≤–∏–¥–∂–µ—Ç
        self.tabs.addTab(self.connections_tab, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.tabs.addTab(self.credentials_tab, "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self.tabs.addTab(self.general_settings_tab, "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ö–Ω–æ–ø–∫–∏ Ok/Cancel
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        self.tabs.currentChanged.connect(self.on_tab_changed)
    
    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞
        self.reload_connections()
        self.reload_credentials()
        super().showEvent(event)
    
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –Ω–µ–µ
        if index == 0:  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.reload_connections()
        elif index == 1:  # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.reload_credentials()

    def create_connections_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.connections_tab = QWidget()
        layout = QVBoxLayout(self.connections_tab)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.connections_table = QTableWidget()
        self.connections_table.setColumnCount(4)
        self.connections_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–ê–∫—Ç–∏–≤–Ω—ã–π"])
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.reload_connections()
        
        layout.addWidget(self.connections_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
        buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_connection)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_connection)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_connection)
        buttons_layout.addWidget(delete_button)
        
        set_active_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_connection)
        buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(buttons_layout)
    
    def reload_connections(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.connections_table
        self.connections_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.connections_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.connections_table.resizeColumnsToContents()
    
    def on_add_connection(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
        from views.dialogs import ConnectionDialog
        dialog = ConnectionDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            self.main_window.add_connection_signal.emit(data['name'], data['url'])
    
    def on_edit_connection(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
        from views.dialogs import ConnectionDialog
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            name = self.connections_table.item(row, 1).text()
            url = self.connections_table.item(row, 2).text()
            
            dialog = ConnectionDialog(self)
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dialog.name_input.setText(name)
            dialog.url_input.setText(url)
            
            if dialog.exec():
                data = dialog.get_data()
                self.main_window.edit_connection_signal.emit(connection_id, data['name'], data['url'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_connection(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.main_window.delete_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def on_set_active_connection(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.main_window.set_active_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def create_credentials_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_tab = QWidget()
        layout = QVBoxLayout(self.credentials_tab)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.credentials_table = QTableWidget()
        self.credentials_table.setColumnCount(4)
        self.credentials_table.setHorizontalHeaderLabels(["ID", "OMS ID", "–¢–æ–∫–µ–Ω", "GLN"])
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.reload_credentials()
        
        layout.addWidget(self.credentials_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        buttons_layout = QHBoxLayout()
        
        add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_button.clicked.connect(self.on_add_credentials)
        buttons_layout.addWidget(add_button)
        
        edit_button = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_button.clicked.connect(self.on_edit_credentials)
        buttons_layout.addWidget(edit_button)
        
        delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_button.clicked.connect(self.on_delete_credentials)
        buttons_layout.addWidget(delete_button)
        
        layout.addLayout(buttons_layout)
    
    def reload_credentials(self, *args):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ"""
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        source_table = self.main_window.credentials_table
        self.credentials_table.setRowCount(source_table.rowCount())
        for row in range(source_table.rowCount()):
            for col in range(source_table.columnCount()):
                if source_table.item(row, col):
                    self.credentials_table.setItem(row, col, QTableWidgetItem(source_table.item(row, col).text()))
        self.credentials_table.resizeColumnsToContents()
    
    def on_add_credentials(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ"""
        dialog = CredentialsDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            connection_id = None
            row = self.connections_table.currentRow()
            if row >= 0:
                connection_id = int(self.connections_table.item(row, 0).text())
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
            self.main_window.add_credentials_signal.emit(data['omsid'], data['token'], data['gln'], connection_id)
    
    def on_edit_credentials(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ"""
        selected_rows = self.credentials_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        row = selected_rows[0].row()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        try:
            credentials_id = int(self.credentials_table.item(row, 0).text()) if self.credentials_table.item(row, 0) else 0
            omsid = self.credentials_table.item(row, 1).text() if self.credentials_table.item(row, 1) else ""
            token = self.credentials_table.item(row, 2).text() if self.credentials_table.item(row, 2) else ""
            gln = self.credentials_table.item(row, 3).text() if self.credentials_table.item(row, 3) else ""
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dialog = CredentialsDialog(self, {"omsid": omsid, "token": token, "gln": gln})
            if dialog.exec() == QDialog.DialogCode.Accepted:
                data = dialog.get_data()
                self.main_window.edit_credentials_signal.emit(credentials_id, data['omsid'], data['token'], data['gln'])
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def on_delete_credentials(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ"""
        selected_rows = self.credentials_table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        row = selected_rows[0].row()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            credentials_id = int(self.credentials_table.item(row, 0).text()) if self.credentials_table.item(row, 0) else 0
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Icon.Question)
            msg_box.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?")
            msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            msg_box.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            msg_box.setDefaultButton(QMessageBox.StandardButton.No)
            
            if msg_box.exec() == QMessageBox.StandardButton.Yes:
                # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.main_window.delete_credentials_signal.emit(credentials_id)
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def create_general_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.general_settings_tab = QWidget()
        layout = QVBoxLayout(self.general_settings_tab)
        
        # –ü–æ–∫–∞ –≤–∫–ª–∞–¥–∫–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        layout.addWidget(QLabel("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"))

class UtilisationReportDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏"""
    
    def __init__(self, file_id, parent=None, controller=None):
        super().__init__(parent)
        self.file_id = file_id
        self.setWindowTitle("–û—Ç—á–µ—Ç –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏")
        self.setMinimumWidth(600)
        self.setMinimumHeight(400)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.parent_window = parent
        self.controller = controller  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        self.file_data = None
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–∫–µ—Ç
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        file_info_layout = QFormLayout()
        self.file_name_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.product_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.codes_count_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        file_info_layout.addRow("–§–∞–π–ª:", self.file_name_label)
        file_info_layout.addRow("–ü—Ä–æ–¥—É–∫—Ü–∏—è:", self.product_label)
        file_info_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤:", self.codes_count_label)
        
        layout.addLayout(file_info_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        additional_info_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏")
        additional_info_layout = QFormLayout()
        
        # –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏
        self.expiration_date_edit = QDateEdit()
        self.expiration_date_edit.setCalendarPopup(True)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É + 1 –≥–æ–¥
        import datetime
        future_date = datetime.datetime.now() + datetime.timedelta(days=365)
        self.expiration_date_edit.setDate(QDate(future_date.year, future_date.month, future_date.day))
        self.expiration_date_edit.setToolTip("–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –ø–æ–ª—è DateExpiration —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)")
        additional_info_layout.addRow("–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:", self.expiration_date_edit)
        
        # –ù–æ–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∏
        self.series_number_edit = QLineEdit("001")
        self.series_number_edit.setToolTip("–ù–æ–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –ø–æ–ª—è ClaimNumber —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)")
        additional_info_layout.addRow("–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏:", self.series_number_edit)
        
        # –¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_type_combo = QComboBox()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ API
        # –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API, –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: PRINTED, VERIFIED
        self.usage_type_combo.addItem("–ù–∞–ø–µ—á–∞—Ç–∞–Ω (PRINTED)", "PRINTED")
        self.usage_type_combo.addItem("–ü—Ä–æ–≤–µ—Ä–µ–Ω (VERIFIED)", "VERIFIED")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.usage_type_combo.setCurrentIndex(0)
        
        self.usage_type_combo.setToolTip("–¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: PRINTED, VERIFIED)")
        additional_info_layout.addRow("–¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", self.usage_type_combo)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –Ω–∞–¥–ø–∏—Å—å
        info_label = QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
        info_label.setStyleSheet("color: blue; font-style: italic;")
        additional_info_layout.addRow("", info_label)
        
        additional_info_group.setLayout(additional_info_layout)
        layout.addWidget(additional_info_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.codes_table = QTableWidget()
        self.codes_table.setColumnCount(2)
        self.codes_table.setHorizontalHeaderLabels(["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "–í–∫–ª—é—á–∏—Ç—å –≤ –æ—Ç—á–µ—Ç"])
        self.codes_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        self.codes_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏...")
        layout.addWidget(self.loading_label)
        
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç:"))
        layout.addWidget(self.codes_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        self.select_all_button = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.select_all_button.clicked.connect(self.select_all_codes)
        button_layout.addWidget(self.select_all_button)
        
        self.deselect_all_button = QPushButton("–°–Ω—è—Ç—å –≤—ã–±–æ—Ä")
        self.deselect_all_button.clicked.connect(self.deselect_all_codes)
        button_layout.addWidget(self.deselect_all_button)
        
        button_layout.addStretch()
        
        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)
        
        self.submit_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
        self.submit_button.clicked.connect(self.accept)
        button_layout.addWidget(self.submit_button)
        
        layout.addLayout(button_layout)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        self.load_file_data()
    
    def load_file_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            from models.models import AggregationFile
            import logging
            
            logger = logging.getLogger(__name__)
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å ID={self.file_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if not self.controller:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")
                self.reject()
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(self.controller, 'db') or not self.controller.db:
                logger.error("–£ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                self.reject()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ ID —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                logger.info(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å ID={self.file_id} —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
                self.file_data = self.controller.get_aggregation_file_by_id(self.file_id)
                
                if self.file_data:
                    # –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
                    logger.info(f"–§–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: {self.file_data.filename}")
                    
                    if not hasattr(self.file_data, 'marking_codes') or not self.file_data.marking_codes:
                        logger.warning(f"–§–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏")
                        QMessageBox.warning(
                            self,
                            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                            "–§–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞"
                        )
                    else:
                        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ: {len(self.file_data.marking_codes)}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º UI
                    self.update_file_info()
                    return
                else:
                    logger.error(f"–§–∞–π–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å ID={self.file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å ID {self.file_id}"
                    )
                    self.reject()
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {str(e)}")
                logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {str(e)}"
                )
                self.reject()
                return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {str(e)}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {str(e)}"
            )
            self.reject()
    
    def update_file_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.file_data:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        self.file_name_label.setText(self.file_data.filename)
        self.product_label.setText(self.file_data.product)
        self.codes_count_label.setText(str(len(self.file_data.marking_codes)))
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.hide()
        
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ JSON-–¥–∞–Ω–Ω—ã—Ö
        try:
            import json
            import logging
            logger = logging.getLogger(__name__)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if hasattr(self.file_data, 'json_content') and self.file_data.json_content:
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON: {self.file_data.filename}")
                
                # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–∞—Ä—Å–∏–º JSON
                try:
                    json_data = json.loads(self.file_data.json_content)
                    logger.info(f"JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –∫–ª—é—á–∏: {', '.join(json_data.keys())}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ (–∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö)
                    series_fields = ['ClaimNumber', 'SeriesNumber', 'Batch', 'BatchNumber']
                    for field in series_fields:
                        if field in json_data:
                            claim_number = json_data[field]
                            self.series_number_edit.setText(claim_number)
                            logger.info(f"–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –ø–æ–ª—è {field}: {claim_number}")
                            break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö)
                    date_fields = ['DateExpiration', 'ExpirationDate', 'ExpiryDate', 'BestBefore']
                    for field in date_fields:
                        if field in json_data:
                            date_expiration = json_data[field]
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π {field}: {date_expiration}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                            date_formats = [
                                '%Y-%m-%d',       # 2023-12-31
                                '%d.%m.%Y',       # 31.12.2023
                                '%Y/%m/%d',       # 2023/12/31
                                '%d/%m/%Y',       # 31/12/2023
                                '%m/%d/%Y',       # 12/31/2023
                                '%Y-%m-%dT%H:%M:%S',  # ISO —Ñ–æ—Ä–º–∞—Ç
                                '%Y-%m-%dT%H:%M:%S.%fZ'  # ISO —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
                            ]
                            
                            expiration_date = None
                            for date_format in date_formats:
                                try:
                                    import datetime
                                    expiration_date = datetime.datetime.strptime(date_expiration, date_format)
                                    logger.info(f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –ø–æ–ª—è {field}: {date_expiration} (—Ñ–æ—Ä–º–∞—Ç: {date_format})")
                                    break
                                except ValueError:
                                    continue
                            
                            if expiration_date:
                                self.expiration_date_edit.setDate(QDate(expiration_date.year, expiration_date.month, expiration_date.day))
                                break
                            else:
                                logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ {field}: {date_expiration}")
                except json.JSONDecodeError as je:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(je)}")
                
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –µ—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, 
                # –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                if not self.series_number_edit.text() or self.series_number_edit.text() == "001":
                    import re
                    
                    # –ò—â–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏
                    series_patterns = [
                        r'ClaimNumber["\s:=]+([^"\s,}]+)',
                        r'SeriesNumber["\s:=]+([^"\s,}]+)',
                        r'Batch["\s:=]+([^"\s,}]+)',
                        r'BatchNumber["\s:=]+([^"\s,}]+)'
                    ]
                    
                    for pattern in series_patterns:
                        series_match = re.search(pattern, self.file_data.json_content)
                        if series_match:
                            series = series_match.group(1).strip('"\'')
                            self.series_number_edit.setText(series)
                            logger.info(f"–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω —Å –ø–æ–º–æ—â—å—é regex: {series}")
                            break
                
                # –ò—â–µ–º –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é regex, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–Ω—å—à–µ
                date_regex = r'(?:DateExpiration|ExpirationDate|ExpiryDate|BestBefore)["\s:=]+"?([^"\s,}]+)"?'
                date_match = re.search(date_regex, self.file_data.json_content)
                if date_match:
                    date_str = date_match.group(1)
                    logger.info(f"–î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é regex: {date_str}")
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é regex
                    date_parts = re.findall(r'\d+', date_str)
                    if len(date_parts) >= 3:
                        try:
                            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å –∏–ª–∏ –¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥
                            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ > 31, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –≥–æ–¥
                            if int(date_parts[0]) > 31:
                                year = int(date_parts[0])
                                month = int(date_parts[1])
                                day = int(date_parts[2])
                            else:
                                # –ò–Ω–∞—á–µ —ç—Ç–æ –¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥
                                day = int(date_parts[0])
                                month = int(date_parts[1])
                                year = int(date_parts[2])
                                
                                # –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 2000
                                if year < 100:
                                    year += 2000
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                            if 1 <= month <= 12 and 1 <= day <= 31 and year > 2000:
                                from PyQt6.QtCore import QDate
                                self.expiration_date_edit.setDate(QDate(year, month, day))
                                logger.info(f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é regex: {year}-{month}-{day}")
                        except (ValueError, IndexError) as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {str(e)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON: {str(e)}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–¥–∞–º–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.codes_table.setRowCount(len(self.file_data.marking_codes))
        
        for i, code in enumerate(self.file_data.marking_codes):
            # –ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            self.codes_table.setItem(i, 0, QTableWidgetItem(code))
            
            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞
            checkbox = QTableWidgetItem()
            checkbox.setFlags(Qt.ItemFlag.ItemIsUserCheckable | Qt.ItemFlag.ItemIsEnabled)
            checkbox.setCheckState(Qt.CheckState.Checked)
            self.codes_table.setItem(i, 1, checkbox)
        
        self.codes_table.resizeColumnsToContents()
    
    def select_all_codes(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        for i in range(self.codes_table.rowCount()):
            self.codes_table.item(i, 1).setCheckState(Qt.CheckState.Checked)
    
    def deselect_all_codes(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        for i in range(self.codes_table.rowCount()):
            self.codes_table.item(i, 1).setCheckState(Qt.CheckState.Unchecked)
    
    def get_report_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        selected_codes = []
        for i in range(self.codes_table.rowCount()):
            if self.codes_table.item(i, 1).checkState() == Qt.CheckState.Checked:
                code = self.codes_table.item(i, 0).text()
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ [GS] –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª GS (–∫–æ–¥ 29)
                code = code.replace('[GS]', '\x1d')
                selected_codes.append(code)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
        expiration_date = self.expiration_date_edit.date().toString('yyyy-MM-dd')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
        series_number = self.series_number_edit.text().strip()
        if not series_number:
            series_number = "001"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
        usage_type = self.usage_type_combo.currentData()
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç
        if not usage_type:
            usage_type = self.usage_type_combo.currentText()
        
        # –ü–æ–ª—É—á–∞–µ–º omsId –∏–∑ —Ç–µ–∫—É—â–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        omsId = ""
        try:
            if self.controller and hasattr(self.controller, 'db'):
                credentials = self.controller.db.get_credentials()
                if credentials and len(credentials) > 0:
                    omsId = credentials[0].omsid
                    logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω omsId –¥–ª—è –æ—Ç—á–µ—Ç–∞: {omsId}")
        except Exception as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ omsId: {str(e)}")
            
        # –ï—Å–ª–∏ omsId –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ api_client
        if not omsId and self.controller and hasattr(self.controller, 'api_client'):
            omsId = self.controller.api_client.omsid
            if omsId:
                logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω omsId –∏–∑ API-–∫–ª–∏–µ–Ω—Ç–∞: {omsId}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
        report_data = {
            "sntins": selected_codes,
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            "expirationDate": expiration_date,
            "seriesNumber": series_number,
            "usageType": usage_type,
            "omsId": omsId  # –î–æ–±–∞–≤–ª—è–µ–º omsId –≤ –æ—Ç—á–µ—Ç
        }
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å omsId, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not omsId:
            from PyQt6.QtWidgets import QMessageBox
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –°–£–ó (omsId). –û—Ç—á–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω API. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            )
            logging.getLogger(__name__).warning("omsId –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        
        return report_data